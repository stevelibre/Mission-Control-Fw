#include <stdio.h>
#include <stdint.h>
#include <string.h>


#include <cross_studio_io.h>

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"


#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_i2c.h"
#include "stm32f4xx_exti.h"
#include "stm32f4_discovery.h"
//
#include "usbd_cdc_core.h"
#include "usbd_usr.h"
#include "usbd_desc.h"
#include "usbd_cdc_vcp.h"


#include "STM32_LEDBlinky.h"
#include "data_trace.h"
#include "number_format.h"
#include "mc_globals.h"

#include "I2C.h"
#include "ADXL345.h"
#include "HMC5883L.h"
#include "ITG3200.h"
#include "EM_406A_GPS.h"
#include "usart_lib.h"


/* Private variables ---------------------------------------------------------*/

__ALIGN_BEGIN USB_OTG_CORE_HANDLE  USB_OTG_dev __ALIGN_END;

 __IO uint32_t TimingDelay;


#define BLINK_TASK_PRIO tskIDLE_PRIORITY + 1
#define WRITE_QUEUE_LENGTH 3
#define USART_TASK_PRIO tskIDLE_PRIORITY + 3
#define SENSOR_TASK_PRIO tskIDLE_PRIORITY + 2

I2C_InitTypeDef I2C_InitStructure;

//xQueueHandle USARTQueueHandle;
struct dataset_3d 
{
   int x;
   int y;
   int z;
  
};

typedef struct dataset_3d dataset_3d;

static void SensorStickReadTask(void *pvParameters);
static void QueueReadTestTask(void *pvParameters);
int correct_number_format(int messed_up);

xQueueHandle USARTQueueHandle;

int main(void)
 {
	/* System Initialization. */
	SystemInit();
	SystemCoreClockUpdate();

	debug_printf("System Core Clock is running at: %dMHz\n",SystemCoreClock/1000000);

	IO_Init();
        I2C1_Init();

       // ADXL345_init(I2C1);
        HMC5883_init(I2C1);
//     ITG3200_init(I2C1);
        
        Init_USART2();
        debug_printf("USART2 init ok. \n");
        Init_USART3();
        debug_printf("USART3 init ok. \n");

#ifdef USB_OTG

USBD_Init(&USB_OTG_dev,
            USB_OTG_FS_CORE_ID,
            &USR_desc,
            &USBD_CDC_cb,
                &USR_cb);
 
       debug_printf("USB Serial Interface setup completed \n");

#endif
       debug_printf("Completed Initialization \n");

//       debug_printf("INFO: Creating USART  Queue\n");
//       
    if ( (USARTQueueHandle = xQueueCreate( (unsigned portBASE_TYPE) QUEUE_DATA_CHANNELS, datasize ))  == NULL ){
          debug_printf("ERROR : Failed to allocate memory for the serial terminal USART queue :-( \n");      }
        
      debug_printf("INFO: Creating tasks \n");

       xTaskCreate( ADXL345_readoutTask, (signed char*)"AccelReadOut", 128,NULL, BLINK_TASK_PRIO+1,NULL);
       xTaskCreate( HMC5883_readoutTask, (signed char*)"CompassReadOut", 128,NULL,BLINK_TASK_PRIO +1,NULL);
       xTaskCreate( ITG32000_readoutTask, (signed char*)"CompassReadOut", 128,NULL, BLINK_TASK_PRIO+1,NULL);
       xTaskCreate(USART_WriteQueueTask,(signed char*) "USARTWriteQueue",128,NULL, USART_TASK_PRIO ,NULL);
      //xTaskCreate(GPSReadoutTask, (signed char*)"GPSReadout", 256, NULL, BLINK_TASK_PRIO,NULL);

  debug_printf("FreeRTOS Scheduler starting\n");
	vTaskStartScheduler();
        //paranoid ..
        while(1);
}
